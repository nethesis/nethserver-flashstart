#!/usr/bin/python

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import fileinput
import simplejson
import ipaddress
import subprocess
import re

def invalid_attribute(parameter, error):
    return { "parameter": parameter, "error": error, "value": "" }

def login_flashstart_ok(username, password):
    bash_command = "/usr/bin/curl -sS https://ddns.flashstart.com/nic/update?hostname=&myip=&wildcard=NOCHG&username=%s&password=%s" % (username, password)
    process = subprocess.Popen(bash_command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    if output.rstrip() == 'good':
        return True
    else:
        return False

def get_network_roles():
    bash_command = "/sbin/e-smith/db networks getjson"
    process = subprocess.Popen(bash_command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    db_networks = simplejson.loads(output)
    roles_filter = [ "green", "blue", "hotspot" ]
    network_roles = []

    for elem in db_networks:
        if "role" in elem["props"] and (elem["props"]["role"] in roles_filter):
            network_roles.append(elem["props"]["role"])
    
    # remove duplicates
    network_roles = list(dict.fromkeys(network_roles))
    return network_roles

line = fileinput.input()[0].rstrip()
input_json = simplejson.loads(line)
invalid_attributes = []

enable_flashstart_p = 'enableFlashstart'
username_p = 'username'
password_p = 'password'
roles_filter_p = 'rolesFilter'
bypass_p = 'bypass'

enable_flashstart = ''
username = ''
password = ''

# enable flashstart

if (enable_flashstart_p not in input_json) or (not input_json[enable_flashstart_p]):
    invalid_attributes.append(invalid_attribute(enable_flashstart_p, "empty"))
else:
    enable_flashstart = input_json[enable_flashstart_p]

    if enable_flashstart not in [ 'enabled', 'disabled' ]:
        invalid_attributes.append(invalid_attribute(enable_flashstart_p, "invalid"))

# perform all other validations only if enableFlashstart == 'enabled'
if enable_flashstart == 'enabled':
    # username (e-mail)
    if (username_p not in input_json) or (not input_json[username_p]):
        invalid_attributes.append(invalid_attribute(username_p, "empty"))
    else:
        username = input_json[username_p]

    # password
    if (password_p not in input_json) or (not input_json[password_p]):
        invalid_attributes.append(invalid_attribute(password_p, "empty"))
    else:
        password = input_json[password_p]

    # roles filter
    if roles_filter_p in input_json:
        roles_filter = input_json[roles_filter_p]
        network_roles = get_network_roles()

        for role_filter in roles_filter:
            if role_filter not in network_roles:
                invalid_attributes.append(invalid_attribute(roles_filter_p, "invalid"))

    # bypass - ip address or cidr
    if bypass_p in input_json:
        bypassList = input_json[bypass_p]

        for bypass in bypassList:
            # check empty string
            if bypass:
                is_ip = False
                is_cidr = False

                try:
                    ipaddress.ip_address(u'' + bypass)
                    is_ip = True
                except Exception:
                    pass
                
                if not is_ip:
                    try:
                        ipaddress.ip_network(u'' + bypass)
                        is_cidr = True
                    except Exception:
                        pass

                if (not is_ip) and (not is_cidr):
                    invalid_attributes.append(invalid_attribute(bypass_p, "invalid"))
                    break

    # check login
    if username and password:
        if not login_flashstart_ok(username, password):
            invalid_attributes.append(invalid_attribute(username_p, "bad_login"))
            invalid_attributes.append(invalid_attribute(password_p, "bad_login"))

# output
success = len(invalid_attributes) == 0

if success:
    output = { "state":"success" }
else:
    output = { "type": "NotValid", "message": "validation_failed", "attributes": invalid_attributes }

output_json = simplejson.dumps(output)
print(output_json)

if not success:
    sys.exit(1)
