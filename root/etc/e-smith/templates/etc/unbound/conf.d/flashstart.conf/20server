
#
# 20server
#

{
    use esmith::NetworksDB;
    use esmith::util;
    my $ndb = esmith::NetworksDB->open_ro();
    my $roles = $flashstart{'Roles'} || 'green';
    my $status = $flashstart{'status'} || 'disabled';

    if ($status eq 'disabled') {
        return "# Flashstart disabled\n";
    }

    $OUT .= "# Disable DNSSEC (Flashstart doesn't support it)\n";
    $OUT .= "server:\n";
    $OUT .= "      val-permissive-mode: yes\n";
    $OUT .= "      module-config: \"iterator\"\n";
    $OUT .= "      do-not-query-localhost: no\n";

    foreach my $role (split(",",$roles)) {
        foreach my $interface ($ndb->get_by_role($role)) {
            if ($role eq 'hotspot'){
                my ($network, $netbit) = split(/\//, $hsnetwork);
                my $mask = esmith::util::computeNetmaskFromBits($netbit);
                my $prefix = esmith::util::computeLocalNetworkPrefix($network, $mask);

                $OUT .= "      # Allow queries from ".$interface->prop('role')."\n";
                $OUT .= "      interface: ".$prefix."1\n"; # HACK: add 1 to Hotspot network
                $OUT .= "      access-control: ".$hsnetwork." allow\n\n";
            }
            else{
                $OUT .= "      # Allow queries from ".$interface->prop('role')."\n";
                $OUT .= "      interface: ".$interface->prop('ipaddr')."\n";
                $OUT .= "      access-control: ".esmith::util::computeLocalNetworkShortSpec($interface->prop('ipaddr'), $interface->prop('netmask'))." allow\n\n";
            }
        }
    }

    $OUT .= "\n# Add reverse local zones\n";
    foreach ($ndb->green()) {
        my $prefix = esmith::util::computeLocalNetworkPrefix($_->prop("ipaddr"), $_->prop("netmask"));
        my @tmp = split(/\./, $prefix);
        $prefix = join(".",reverse(@tmp)).".in-addr.arpa.";
        $OUT .= "      private-domain: \"$prefix\"\n";
        $OUT .= "      domain-insecure: \"$prefix\"\n";
        $OUT .= "      local-zone: \"$prefix\" transparent\n";
    }
}
