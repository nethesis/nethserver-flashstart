#!/usr/bin/php
<?php

class FlashStartWS
{
    /**
     * Reseller's user name for FlashStart web site
     *
     * @var string
     */
    private $user = '';

    /**
     * Reseller's password for FlashStart web site
     *
     * @var string
     */
    private $password = '';

    /**
     * WISDL url for FlashStart
     *
     * @var string
     */
    private $url = 'http://cloud.flashstart.it/ServiceFS/FlashStart.Service.php?wsdl';

    /**
     * SOAP client
     *
     * @var object
     */
    private $client = NULL;

    /**
     * FlashStart token
     *
     * @var object
     */
    private $token = NULL;


    /**
     * Create a SOAP client for FlashStart web site
     *
     * @param string $user reseller's user name
     * @param string $password reseller's password
     * @param string $url WISDL url (optional)
     *
     * @api
     * @return FlashStart
     */
    public function __construct($user, $password, $url = '')
    {
        $this->user = $user;
        $this->password = $password;
        if ($url) {
            $this->url = $url;
        }
        $this->client = new SoapClient($this->url);
        
        try {
            $this->token = $this->client->Login(array('UserName' => $this->user, 'Password' => $this->password, 'ApplicationID' => 'HS'));
            if ($this->token->TokenID == "null") {
                throw new Exception('Bad credentials');
            }
        } catch (Exception $e) {
            $this->handleException($e);
        }
    }

    private function handleException(Exception $ex)
    {
        echo "FlashStartWS error: " . $ex->getMessage(). "\n";
        exit(1);
    }

    public function getProfileList()
    {
        $ret = array();
        try {
            $result = $this->client->InfoSedeProfile(array('UserAdmin' => $this->user, 'TokenID' => $this->token->TokenID, 'TransactionID' => 'GETPROFILELIST'));
            if (isset($result->OperationInfoSedeProfile->InfoProfile)) {
                foreach($result->OperationInfoSedeProfile->InfoProfile as $obj) {
                    if (isset($obj->iInfoProfile)) {
                        $obj = (array) $obj->iInfoProfile;
                    } else {
                        $obj = (array) $obj;
                    }
                    $ret[$obj['LabelName']] = $obj['PortAvaible'];
                }
            }

            return $ret;
        } catch (\Exception $e) {
            $this->handleException($e);
        }
    }


    public function createProfile($port, $label) 
    {
        $data=array();
        $data["TokenID"]=$this->token->TokenID;
        $data["UserAdmin"]=$this->user;
        $data["TransactionID"]="CREATEPROFILE";
        $data["CreateProfileInputParam"]=array();              
        $data["CreateProfileInputParam"]["TypeProfile"]='1';
        $data["CreateProfileInputParam"]["StatoProfile"]='1';
        $data["CreateProfileInputParam"]["PortAvaible"]=$port;
        $data["CreateProfileInputParam"]["LabelName"]=$label;
        try {
            $result = $this->client->CreateProfile($data);
            if ($result->ResultCreateProfile == 0) {
                throw new Exception("createProfile($port, $label) failed: " . $result->OperationCreateProfile->ResultMsg);
            }
        } catch (\Exception $e) {
            $this->handleException($e);
        }
    }

    public function deleteProfile($port) {
        $data=array();
        $data["TokenID"]=$this->token->TokenID;
        $data["UserAdmin"]=$this->user;
        $data["TransactionID"]="DELETEPROFILE";
        $data["DeleteProfileInputParam"] = array();
        $data["DeleteProfileInputParam"]["PortNumber"] = $port;
        
        try {
            $this->client->DeleteProfile($data);
        } catch (\Exception $e) {
            $this->handleException($e);
        }
    }
}

$user = '';
$password = '';

$system_id = json_decode(exec("/sbin/e-smith/db configuration getjson nethupdate SystemID"));
$user = $system_id->props->SystemID;
if (!$user) {
    echo "No SystemID found";
    exit(1);
}

$network_db = json_decode(exec("/sbin/e-smith/db networks printjson"));
$bridge = false;
foreach ($network_db as $key) {
    if ($key->props->role == 'green') {
        if ($key->type == 'bridge') {
            $bridge = $key->props->device;
        } else {
            $password = $key->props->hwaddr;
            break;
        }
    }
    // search for ethernet associated with the bridge 
    if ($bridge) {
        if ($key->props->role == 'bridged' && $key->props->bridge == $bridge) {
            $password = $key->props->hwaddr;
            break;
        } 
    }
}
if (!$password) {
    echo "No suitable MAC found";
    exit(1);
}


$ws = new FlashStartWS($user,$password);
$remote_profiles = $ws->getProfileList();

$flash_db = json_decode(exec("/sbin/e-smith/db flashstart printjson"));

foreach($flash_db as $key) {
   // create remote profile if not exists
   if (!in_array($key->name, array_keys($remote_profiles))) {
       echo "FlashStartWS: creating remote profile {$key->name} ({$key->props->Port})\n";
       $ws->createProfile($key->props->Port, $key->name);
   }
   unset($remote_profiles[$key->name]);
}

//delete profiles only on remote server
foreach ($remote_profiles as $name => $port) {
    echo "FlashStartWS: removing remote profile $name ($port)\n";
    $ws->deleteProfile($port);
}

$hostname = json_decode(exec("/sbin/e-smith/db configuration getjson SystemName"));
$hostname = $hostname->type;
$domainname = json_decode(exec("/sbin/e-smith/db configuration getjson DomainName"));
$domainname = $domainname->type;
$fqdn="$hostname.$domainname";


$url = "http://$user:$password@188.94.192.215/nic/update";
$query = "hostname=$fqdn&wildcard=NOCHG&mx=NOCHG&backmx=NOCHG";

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_POST, 0);
curl_setopt($ch, CURLOPT_POSTFIELDS,$query);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
$return = trim(curl_exec ($ch));
curl_close ($ch);

if($return == 'good') {
   exit(0);
}  else {
   exit(1);
}


exit(0);
